
% –еализаци€ стандартных предикатов обработки списков

% ƒлина списка
% (список, длина)
my_length([], 0).
my_length([_ | L], N):-my_length(L, M), N is M + 1.

% ѕринадлежность элемента списку
% (элемент, список)
my_member(X, [X | _]).
my_member(X, [_ | T]):-my_member(X, T).

%  онкатинаци€ списков
% (список1, список2, список1+2)
my_append([], L, L).
my_append([X | L1], L2, [X | L3]):-my_append(L1, L2, L3).

% ”даление элемента из списка
% (элемент, список, список без элемента)
my_remove(X, [X | T], T).
my_remove(X, [Y | T], [Y | Z]):-my_remove(X, T, Z).

% ѕерестановки элементов в списке
% (список, перестановка)
my_permute([], []).
my_permute(L, [X | T]):-my_remove(X, L, Y), my_permute(Y, T).

% ѕодсписки списка
% (подсписок, список)
my_sublist(S, L):-my_append(_, L1, L), my_append(S, _, L1).

% получение последнего списка элемента без стандартных предикатов
%(список)
my_last([E],E):-!.
my_last([_|T],E):-my_last(T,E).

% получение последнего списка элемента со стандартными предикатами
%(список, элемент)
my_last_std(L,O):-append(_,[O],L).


% ¬ычисление скал€рного произведени€ двух векторов-списков 
%(с учетом возможного несовпадени€ размерностей)
%(список, список)
%ƒлина списка
%(список, значение)
length_list([], 0).
length_list([_|X], N) :-length_list(X, N1), N is N1+1.

%ѕроверка на совпадение длин списков
%(список, список)
comp_length(L1, L2) :-length_list(L1, N), length_list(L2, C), N =:= C.

%”множение голов списков
%(список, список)
mult_heads([], [], 0). 
mult_heads([H1|T1], [H2|T2], X) :-C is H1*H2, mult_heads(T1, T2, X1), X is X1 + C. 	

%(список, список, значение)
my_scalar(L1, L2, X) :-comp_length(L1, L2), mult_heads(L1, L2, X).

% ¬ычисление скал€рного произведени€ двух векторов-списков 
%(с учетом возможного несовпадени€ размерностей) с использованием стандатртного предиката same_length
%(список, список, значение)
my_scalar_std(L1, L2, X) :-same_length(L1, L2), mult_heads(L1, L2, X).

%удаление последнего элемента списка с выводом удалЄнного элемента
%(элемент, список, список)
remove_last(0,[],[]).
remove_last(X,[H|T],[H|R]):-my_last([H|T],X), my_remove(X,[H|T],[H|R]).
